
name: Build and Publish Docker Images

on:
  workflow_dispatch:
  schedule:
  - cron: '0 0 15 * *'
  # workflow_run:
  #   workflows: ["Package Module Artifact"]
  #   types:
  #     - completed

jobs:

  getReleaseVersion:
    name: Get Latest Release Version
    runs-on: windows-2022
    outputs:
        release_version: ${{ steps.latestVersion.outputs.release }}
    steps:
      - name: Get latest version
        id: latestVersion
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: seabopo
          repo: psPodTester
          excludes: prerelease, draft

  win2022:
    name: Build Windows 2022 Image
    runs-on: windows-2022
    needs: getReleaseVersion
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: seabopo/pspodtester
          tags: ${{ github.run_id }}-${{ github.run_number }}-nanoserver-ltsc2022-v${{ env.RELEASE }},nanoserver-ltsc2022-v${{ env.RELEASE }}, nanoserver-ltsc2022
          registry: docker.io
          dockerfile: ./docker/dockerfile
          buildArgs: BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-ltsc2022, APP_VERSION=${{ env.RELEASE }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}

  win1809:
    name: Build Windows 2019 Image
    runs-on: windows-2019
    needs: getReleaseVersion
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: seabopo/pspodtester
          tags: ${{ github.run_id }}-${{ github.run_number }}-nanoserver-1809-v${{ env.RELEASE }}, nanoserver-1809-v${{ env.RELEASE }}, nanoserver-1809
          registry: docker.io
          dockerfile: ./docker/dockerfile
          buildArgs: BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-1809, APP_VERSION=${{ env.RELEASE }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}

  multiarch:
    name: Build Windows Multi-Arch Image
    needs: [getReleaseVersion, win2022, win1809]
    runs-on: windows-2022
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: BUILD latest
        run: docker manifest create seabopo/pspodtester:latest --amend seabopo/pspodtester:nanoserver-1809-v${{ env.RELEASE }} --amend seabopo/pspodtester:nanoserver-ltsc2022-v${{ env.RELEASE }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}
      - name: PUSH latest
        run: docker manifest push --purge seabopo/pspodtester:latest
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}
      - name: BUILD nanoserver
        run: docker manifest create seabopo/pspodtester:nanoserver --amend seabopo/pspodtester:nanoserver-1809-v${{ env.RELEASE }} --amend seabopo/pspodtester:nanoserver-ltsc2022-v${{ env.RELEASE }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}
      - name: PUSH nanoserver
        run: docker manifest push --purge seabopo/pspodtester:nanoserver
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}
      - name: BUILD nanoserver-version
        run: docker manifest create seabopo/pspodtester:nanoserver-v${{ env.RELEASE }} --amend seabopo/pspodtester:nanoserver-1809-v${{ env.RELEASE }} --amend seabopo/pspodtester:nanoserver-ltsc2022-v${{ env.RELEASE }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}
      - name: PUSH nanoserver-version
        run: docker manifest push --purge seabopo/pspodtester:nanoserver-v${{ env.RELEASE }}
        env:
          RELEASE: ${{ needs.getReleaseVersion.outputs.release_version }}

